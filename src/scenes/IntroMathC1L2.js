import Phaser from 'phaser';

export class IntroMathC1L2 extends Phaser.Scene {
    constructor() {
        super({ key: 'IntroMathC1L2' });
    }

    preload() {
        // ƒê·∫£m b·∫£o load background ƒë√∫ng c√°ch
        this.load.image('background', 'assets/background.jpg');
    }

    create() {
        // Th√™m background gi·ªëng IntroMathC1L1
        this.bg = this.add.image(512, 384, 'background').setDisplaySize(1024, 768);
        // Danh s√°ch 7 h·∫±ng ƒë·∫≥ng th·ª©c ƒë√°ng nh·ªõ
        this.identities = [
            {
                expr: '(a + b)^2',
                result: 'a^2 + 2ab + b^2',
                explain: '(a + b)^2 = a^2 + 2ab + b^2'
            },
            {
                expr: '(a - b)^2',
                result: 'a^2 - 2ab + b^2',
                explain: '(a - b)^2 = a^2 - 2ab + b^2'
            },
            {
                expr: '(a - b)(a + b)',
                result: 'a^2 - b^2',
                explain: '(a - b)(a + b) = a^2 - b^2'
            },
            {
                expr: '(a + b)^3',
                result: 'a^3 + 3a^2b + 3ab^2 + b^3',
                explain: '(a + b)^3 = a^3 + 3a^2b + 3ab^2 + b^3'
            },
            {
                expr: '(a - b)^3',
                result: 'a^3 - 3a^2b + 3ab^2 - b^3',
                explain: '(a - b)^3 = a^3 - 3a^2b + 3ab^2 - b^3'
            },
            {
                expr: 'a^3 + b^3',
                result: '(a + b)(a^2 - ab + b^2)',
                explain: 'a^3 + b^3 = (a + b)(a^2 - ab + b^2)'
            },
            {
                expr: 'a^3 - b^3',
                result: '(a - b)(a^2 + ab + b^2)',
                explain: 'a^3 - b^3 = (a - b)(a^2 + ab + b^2)'
            }
        ];

        // Hi·ªÉn th·ªã khung v√† 7 h·∫±ng ƒë·∫≥ng th·ª©c ·ªü gi·ªØa trang (ƒë∆∞a xu·ªëng d∆∞·ªõi 1 ch√∫t)
        const boxWidth = 700;
        const boxHeight = 7 * 38 + 40;
        const boxX = (1024 - boxWidth) / 2;
        const boxY = 200; // tƒÉng t·ª´ 120 l√™n 180 ƒë·ªÉ xu·ªëng d∆∞·ªõi
        // V·∫Ω khung
        const graphics = this.add.graphics();
        graphics.lineStyle(4, 0x1976d2, 1);
        graphics.fillStyle(0xf0f8ff, 0.95);
        graphics.fillRoundedRect(boxX, boxY, boxWidth, boxHeight, 18);
        graphics.strokeRoundedRect(boxX, boxY, boxWidth, boxHeight, 18);
        // Ti√™u ƒë·ªÅ
        this.add.text(512, boxY - 40, '7 H·∫∞NG ƒê·∫≤NG TH·ª®C ƒê√ÅNG NH·ªö', { font: 'bold 32px Arial', color: '#000', fontStyle: 'bold' }).setOrigin(0.5);
        // Hi·ªÉn th·ªã 7 h·∫±ng ƒë·∫≥ng th·ª©c ·ªü gi·ªØa khung
        this.identities.forEach((id, idx) => {
            this.add.text(512, boxY + 24 + idx * 38, `${idx + 1}. ${id.explain}`, { font: '22px Arial', color: '#222' }).setOrigin(0.5);
        });
        // N√∫t C·ªßng c·ªë ki·∫øn th·ª©c
        this.practiceBtn = this.add.text(512, boxY + boxHeight + 40, 'C·ªßng c·ªë ki·∫øn th·ª©c', {
            font: 'bold 26px Arial',
            color: '#fff',
            backgroundColor: '#4CAF50',
            padding: 16,
            borderRadius: 10
        })
        .setOrigin(0.5)
        .setInteractive({ useHandCursor: true })
        .on('pointerover', () => {
            this.practiceBtn.setStyle({ backgroundColor: '#43a047', color: '#ffe066' });
            this.tweens.add({ targets: this.practiceBtn, scale: 1.08, duration: 100 });
        })
        .on('pointerout', () => {
            this.practiceBtn.setStyle({ backgroundColor: '#4CAF50', color: '#fff' });
            this.tweens.add({ targets: this.practiceBtn, scale: 1, duration: 100 });
        })
        .on('pointerdown', () => {
            this.startGame();
        });
    }

    startGame() {
        // X√≥a c√°c text c≈© nh∆∞ng gi·ªØ l·∫°i background
        this.children.removeAll();
        this.bg = this.add.image(512, 384, 'background').setDisplaySize(1024, 768);
        // V·∫Ω l·∫°i ƒë·ªìng h·ªì ƒë·∫øm th·ªùi gian (ch·ªâ xu·∫•t hi·ªán khi v√†o game)
        this.timerTextBg = this.add.graphics();
        this.timerTextBg.fillStyle(0xffe066, 0.95);
        this.timerTextBg.fillRoundedRect(740, 40, 180, 48, 18);
        this.timerTextBg.lineStyle(4, 0xff3333, 1);
        this.timerTextBg.strokeRoundedRect(740, 40, 180, 48, 18);
        this.timerText = this.add.text(830, 64, '', {
            font: 'bold 28px Arial',
            color: '#d7263d',
            fontStyle: 'bold',
            align: 'center',
            shadow: { offsetX: 2, offsetY: 2, color: '#fff', blur: 4, fill: true }
        }).setOrigin(0.5);
        this.current = 0;
        this.timer = null;
        this.timeLeft = 10;
        this.timerText.setVisible(true);
        this.nextQuestion();
    }

    nextQuestion() {
        if (this.currentText) this.currentText.destroy();
        if (this.answerBtns) this.answerBtns.forEach(btn => btn.destroy());
        if (this.explainText) this.explainText.destroy();
        if (this.timer) this.timer.remove();
        this.timeLeft = 10;
        this.updateTimerText();
        if (this.current === 7) {
            // X√≥a to√†n b·ªô ƒë√°p √°n v√† c√¢u h·ªèi c√≤n l·∫°i
            if (this.currentText) this.currentText.destroy();
            if (this.answerBtns) this.answerBtns.forEach(btn => { btn.destroy(); });
            // X√≥a layout ƒë√°p √°n (n·ªÅn ƒë√°p √°n)
            if (this.answerBtnBgs) this.answerBtnBgs.forEach(bg => bg.destroy());
            // ·∫®n ƒë·ªìng h·ªì
            this.timerText.setVisible(false);
            this.timerTextBg.clear();
            // Hi·ªÉn th·ªã th√¥ng b√°o ho√†n th√†nh n·ªïi b·∫≠t, cƒÉn gi·ªØa
            this.explainText = this.add.text(512, 400, `üéâ Ho√†n th√†nh tr√≤ ch∆°i!`, {
                font: 'bold 32px Arial',
                color: '#fff',
                backgroundColor: '#43a047',
                padding: { left: 24, right: 24, top: 18, bottom: 18 },
                align: 'center',
                fontStyle: 'bold',
                borderRadius: 16,
                shadow: { offsetX: 2, offsetY: 2, color: '#222', blur: 6, fill: true },
                lineSpacing: 10
            }).setOrigin(0.5);
            return;
        }

        // L·∫•y c√¢u h·ªèi ng·∫´u nhi√™n ch∆∞a h·ªèi
        if (!this.usedIdxs) this.usedIdxs = [];
        let idx;
        do {
            idx = Phaser.Math.Between(0, 6);
        } while (this.usedIdxs.includes(idx));
        this.usedIdxs.push(idx);
        const q = this.identities[idx];
        this.current++;

        // Sinh ƒë√°p √°n sai
        let wrongs = this.identities.filter((id, i) => i !== idx).map(id => id.result);
        Phaser.Utils.Array.Shuffle(wrongs);
        let choices = [q.result, wrongs[0], wrongs[1]];
        Phaser.Utils.Array.Shuffle(choices);

        // Hi·ªÉn th·ªã c√¢u h·ªèi
        this.currentText = this.add.text(180, 140, `C√¢u ${this.current}: Bi·ªÉu th·ª©c n√†o l√† k·∫øt qu·∫£ c·ªßa ${q.expr} ?`, {
            font: 'bold 26px Arial', color: '#222', backgroundColor: '#fffbe6', padding: 10
        });

        // Hi·ªÉn th·ªã ƒë√°p √°n (layout ƒë·∫πp h∆°n, cƒÉn gi·ªØa, bo g√≥c, spacing ƒë·ªÅu)
        const answerBoxWidth = 520;
        const answerBoxHeight = 60;
        const answerBoxYStart = 260;
        const answerBoxSpacing = 30;
        this.answerBtnBgs = [];
        this.answerBtns = choices.map((ans, i) => {
            let btnBg = this.add.graphics();
            this.answerBtnBgs.push(btnBg);
            let y = answerBoxYStart + i * (answerBoxHeight + answerBoxSpacing);
            btnBg.fillStyle(0x1976d2, 1);
            btnBg.fillRoundedRect(252, y, answerBoxWidth, answerBoxHeight, 16);
            btnBg.lineStyle(2, 0x0a5, 0.7);
            btnBg.strokeRoundedRect(252, y, answerBoxWidth, answerBoxHeight, 16);
            let btn = this.add.text(512, y + answerBoxHeight/2, ans, {
                font: 'bold 24px Arial',
                color: '#fff',
                align: 'center',
                wordWrap: { width: answerBoxWidth - 40 }
            }).setOrigin(0.5);
            btn.setInteractive({ useHandCursor: true })
            .on('pointerover', () => {
                btnBg.clear();
                btnBg.fillStyle(0x1565c0, 1);
                btnBg.fillRoundedRect(252, y, answerBoxWidth, answerBoxHeight, 16);
                btnBg.lineStyle(2, 0xffe066, 1);
                btnBg.strokeRoundedRect(252, y, answerBoxWidth, answerBoxHeight, 16);
                btn.setColor('#ffe066');
                this.tweens.add({ targets: btn, scale: 1.08, duration: 100 });
            })
            .on('pointerout', () => {
                btnBg.clear();
                btnBg.fillStyle(0x1976d2, 1);
                btnBg.fillRoundedRect(252, y, answerBoxWidth, answerBoxHeight, 16);
                btnBg.lineStyle(2, 0x0a5, 0.7);
                btnBg.strokeRoundedRect(252, y, answerBoxWidth, answerBoxHeight, 16);
                btn.setColor('#fff');
                this.tweens.add({ targets: btn, scale: 1, duration: 100 });
            })
            .on('pointerdown', () => this.checkAnswer(ans, q));
            // ƒê·ªÉ disable d·ªÖ d√†ng
            btn.disableBg = () => btnBg.clear();
            return btn;
        });
        // B·∫Øt ƒë·∫ßu countdown
        this.timer = this.time.addEvent({
            delay: 1000,
            repeat: 9,
            callback: () => {
                this.timeLeft--;
                this.updateTimerText();
                if (this.timeLeft === 0) {
                    this.timer.remove();
                    this.showTimeUp(q);
                }
            }
        });
    }

    updateTimerText() {
        this.timerText.setText('‚è∞ ' + this.timeLeft + ' gi√¢y');
        if (this.timeLeft <= 3) {
            this.timerText.setColor('#fff');
            this.timerTextBg.clear();
            this.timerTextBg.fillStyle(0xff3333, 1);
            this.timerTextBg.fillRoundedRect(740, 40, 180, 48, 18);
            this.timerTextBg.lineStyle(4, 0xffe066, 1);
            this.timerTextBg.strokeRoundedRect(740, 40, 180, 48, 18);
            this.tweens.add({ targets: this.timerText, scale: 1.3, yoyo: true, duration: 200, repeat: 1 });
        } else {
            this.timerText.setColor('#d7263d');
            this.timerTextBg.clear();
            this.timerTextBg.fillStyle(0xffe066, 0.95);
            this.timerTextBg.fillRoundedRect(740, 40, 180, 48, 18);
            this.timerTextBg.lineStyle(4, 0xff3333, 1);
            this.timerTextBg.strokeRoundedRect(740, 40, 180, 48, 18);
            this.timerText.setScale(1);
        }
    }

    checkAnswer(ans, q) {
        if (this.timer) this.timer.remove();
        this.answerBtns.forEach(btn => btn.disableInteractive());
        // T√≠nh v·ªã tr√≠ d∆∞·ªõi ƒë√°p √°n
        const answerBoxYStart = 260;
        const answerBoxHeight = 60;
        const answerBoxSpacing = 30;
        const y = answerBoxYStart + 3 * (answerBoxHeight + answerBoxSpacing) + 20;
        if (ans === q.result) {
            this.explainText = this.add.text(512, y, '‚úîÔ∏è Ch√≠nh x√°c! Ti·∫øp t·ª•c...', {
                font: 'bold 26px Arial',
                color: '#fff',
                backgroundColor: '#43a047',
                padding: { left: 18, right: 18, top: 8, bottom: 8 },
                align: 'center',
                fontStyle: 'bold',
                borderRadius: 10,
                shadow: { offsetX: 2, offsetY: 2, color: '#222', blur: 6, fill: true }
            }).setOrigin(0.5);
            this.time.delayedCall(900, () => {
                this.explainText.destroy();
                this.nextQuestion();
            });
        } else {
            this.explainText = this.add.text(512, y, `‚ùå Sai r·ªìi! ${q.explain}`, {
                font: 'bold 26px Arial',
                color: '#fff',
                backgroundColor: '#d7263d',
                padding: { left: 18, right: 18, top: 8, bottom: 8 },
                align: 'center',
                fontStyle: 'bold',
                borderRadius: 10,
                shadow: { offsetX: 2, offsetY: 2, color: '#222', blur: 6, fill: true }
            }).setOrigin(0.5);
            this.time.delayedCall(1200, () => {
                this.explainText.destroy();
                this.nextQuestion();
            });
        }
    }

    showTimeUp(q) {
        this.answerBtns.forEach(btn => btn.disableInteractive());
        // Hi·ªÉn th·ªã th√¥ng b√°o h·∫øt th·ªùi gian n·ªïi b·∫≠t d∆∞·ªõi ƒë√°p √°n
        const answerBoxYStart = 260;
        const answerBoxHeight = 60;
        const answerBoxSpacing = 30;
        const y = answerBoxYStart + 3 * (answerBoxHeight + answerBoxSpacing) + 20;
        this.explainText = this.add.text(512, y, `‚è∞ H·∫øt th·ªùi gian! ƒê√°p √°n ƒë√∫ng: ${q.result}`, {
            font: 'bold 26px Arial',
            color: '#fff',
            backgroundColor: '#ff6600',
            padding: { left: 18, right: 18, top: 8, bottom: 8 },
            align: 'center',
            fontStyle: 'bold',
            borderRadius: 10,
            shadow: { offsetX: 2, offsetY: 2, color: '#222', blur: 6, fill: true }
        }).setOrigin(0.5);
        this.time.delayedCall(1200, () => {
            this.explainText.destroy();
            this.nextQuestion();
        });
    }
}